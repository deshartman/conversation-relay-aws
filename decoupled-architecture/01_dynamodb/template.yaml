AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Stack to build primary DynamoDB Table for ConversationRelay Application

Parameters:
  CurrentEnvironment:
    Type: String
    Default: 'DEV'

Resources:
  DDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TimeToLiveSpecification:
        AttributeName: expireAt
        Enabled: true
      TableName: "ConversationRelayAppDatabase"
      BillingMode: 'PAY_PER_REQUEST'
      StreamSpecification:
        StreamViewType: "NEW_IMAGE"
      AttributeDefinitions:
        -
          AttributeName: "pk"
          AttributeType: "S"
        -
          AttributeName: "sk"
          AttributeType: "S"
        -
          AttributeName: "pk1"
          AttributeType: "S"
        -
          AttributeName: "sk1"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "pk"
          KeyType: "HASH"
        -
          AttributeName: "sk"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        # String based index. Keys vary by type of item
        -
          IndexName: "index-1-full"
          KeySchema:
            -
              AttributeName: "pk1"
              KeyType: "HASH"
            -
              AttributeName: "sk1"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"

  ########################################
  # Lambda Layer available to all lambdas
  # This layer makes it easy to build
  # update expressions.
  ########################################
  ConversationRelayDynamoDBUtilLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: ConversationRelayDynamoDBUtilLayer
      Description: Helper functions for DynamoDB
      ContentUri: layers/layer-cr-dynamodb-util/
      CompatibleRuntimes:
        - nodejs20.x
      LicenseInfo: 'MIT'
      RetentionPolicy: Retain

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                Resource: !GetAtt DDBTable.StreamArn

  EventSourceDDBTableStream:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: True
      EventSourceArn: !GetAtt DDBTable.StreamArn
      FunctionName: !GetAtt ProcessEventLambda.Arn
      StartingPosition: LATEST

  ProcessEventLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ProcessEventLamda
      Description: Lambda to Process DDB Steam Event 
      CodeUri: lambdas/process-event/
      AutoPublishAlias: live
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      Architectures:
        - arm64   
      Timeout: 5
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
          
Outputs:
  DynamonDBTableName:
    Value: !Ref DDBTable
    Export:
      Name: 'CRPrimaryDynamoTableName'
  DynamonDBArn:
    Value: !GetAtt 
      - DDBTable
      - Arn
    Export:
      Name: 'CRPrimaryDynamoTableArn'
  StreamArn:
    Description: DynamoDB Table ARN created for this example
    Value: !GetAtt DDBTable.StreamArn
    Export:
      Name: 'CRPrimaryDynamoTableStreamArn'